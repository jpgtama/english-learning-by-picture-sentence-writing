{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAAA;;;;IAKM,I;AACF,oBAAc;AAAA;;AACV,aAAK,SAAL,GAAiB,SAAS,aAAT,CAAuB,KAAvB,CAAjB;AACH;;;;8BAEK,G,EAAK;AACP,iBAAK,SAAL,CAAe,SAAf,GAA2B,GAA3B;;AAEA,gBAAI,QAAQ,KAAK,SAAL,CAAe,iBAA3B;;AAEA,iBAAK,SAAL,CAAe,SAAf,GAA2B,EAA3B;;AAEA,mBAAO,KAAP;AACH;;;;;;IAMC,a;AACF,2BAAY,GAAZ,EAAgB;AAAA;;AACZ,aAAK,GAAL,GAAW,GAAX;AACA,aAAK,WAAL,GAAmB,IAAI,cAAJ,EAAnB;AACH;;;;qCAEY,E,EAAG;AAAA;;AACZ,iBAAK,WAAL,CAAiB,kBAAjB,GAAsC,YAAM;AACxC,oBAAG,MAAK,WAAL,CAAiB,UAAjB,KAAgC,eAAe,IAAlD,EAAuD;AACnD,wBAAG,MAAK,WAAL,CAAiB,MAAjB,KAA4B,GAA/B,EAAmC;AAC/B,4BAAI,OAAO,MAAK,WAAL,CAAiB,YAA5B;AACA,2BAAG,IAAH;AACH,qBAHD,MAGK;AACD,8BAAM,qCAAoC,MAAK,WAAL,CAAiB,MAA3D;AACH;AACJ;AACJ,aATD;AAUH;;;4BAEG,Q,EAAS;AACT,iBAAK,YAAL,CAAkB,QAAlB;AACA,iBAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB,EAA6B,KAAK,GAAlC,EAAuC,IAAvC;AACA,iBAAK,WAAL,CAAiB,IAAjB;AACH;;;;;;AAML;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index-compiled.js","sourcesContent":["/**\r\n * Created by evan on 2017/4/18.\r\n */\r\n\r\n\r\nclass Util {\r\n    constructor() {\r\n        this.helperDom = document.createElement('div');\r\n    }\r\n\r\n    toDom(str) {\r\n        this.helperDom.innerHTML = str;\r\n\r\n        var child = this.helperDom.firstElementChild;\r\n\r\n        this.helperDom.innerHTML = '';\r\n\r\n        return child;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nclass MyHttpRequest{\r\n    constructor(url){\r\n        this.url = url;\r\n        this.httpRequest = new XMLHttpRequest();\r\n    }\r\n\r\n    _setCallback(cb){\r\n        this.httpRequest.onreadystatechange = () => {\r\n            if(this.httpRequest.readyState === XMLHttpRequest.DONE){\r\n                if(this.httpRequest.status === 200){\r\n                    var data = this.httpRequest.responseText;\r\n                    cb(data);\r\n                }else{\r\n                    throw 'response code is not 200, it is '+ this.httpRequest.status;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    get(callback){\r\n        this._setCallback(callback);\r\n        this.httpRequest.open('GET', this.url, true);\r\n        this.httpRequest.send();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// class BaseWidget{\r\n//     constructor(parentNode, domNodeStr){\r\n//         this.domNode = new Util().toDom(domNodeStr);\r\n//         if(parentNode){\r\n//             parentNode.appendChild(this.domNode);\r\n//         }\r\n//\r\n//     }\r\n// }\r\n\r\n\r\n// Image Widget\r\n// class ImageWidget extends BaseWidget{\r\n//     constructor(parentNode) {\r\n//         super(parentNode, `<div class=\"picture-widget\">\r\n//             <input type=\"file\"/>\r\n//             <div class=\"preview\"></div>\r\n//         </div>`);\r\n//\r\n//         // get inner node\r\n//         this.uploadNode = this.domNode.querySelector('input');\r\n//         this.previewNode = this.domNode.querySelector('.preview');\r\n//\r\n//         // handle file select\r\n//         var handleFileSelect =  (evt) => {\r\n//             var files = evt.target.files; // FileList object\r\n//\r\n//             // check file count\r\n//             if (files.length !== 1) {\r\n//                 throw 'only 1 file should be selected';\r\n//             }\r\n//\r\n//             this.selectedFile = files[0];\r\n//\r\n//             // Loop through the FileList and render image files as thumbnails.\r\n//             for (var i = 0, f; f = files[i]; i++) {\r\n//\r\n//                 // Only process image files.\r\n//                 if (!f.type.match('image.*')) {\r\n//                     continue;\r\n//                 }\r\n//\r\n//                 var reader = new FileReader();\r\n//\r\n//                 reader.onload = (e) => {\r\n//                     this.previewNode.innerHTML = ['<img class=\"thumb\" src=\"', e.target.result,\r\n//                         '\" title=\"', escape(this.selectedFile.name), '\"/>'].join('');\r\n//                 };\r\n//\r\n//                 // Read in the image file as a data URL.\r\n//                 reader.readAsDataURL(f);\r\n//             }\r\n//         };\r\n//\r\n//         this.uploadNode.addEventListener('change', handleFileSelect, false);\r\n//     }\r\n//\r\n//\r\n// }\r\n//\r\n// class ChineseEnglishSentenceWidget extends BaseWidget{\r\n//     constructor(parentNode, chineseSentence = '', englishSentence = '', mode='readonly'){\r\n//         super(parentNode, `<div class=\"chinese-english-sentences-widget\">\r\n//             <div class=\"content\">\r\n//                 <div class=\"chinese-sentence\">\r\n//                 </div>\r\n//                 <div class=\"english-sentence\">\r\n//                 </div>\r\n//             </div>\r\n//         </div>`);\r\n//\r\n//         // add EditorTextAreaWidget\r\n//         // new EditorTextAreaWidget(this.domNode.querySelector('.chinese-sentence'), mode, chineseSentence);\r\n//         // new EditorTextAreaWidget(this.domNode.querySelector('.english-sentence'), mode, englishSentence);\r\n//\r\n//         // add AreaWidget\r\n//         new TextAreaWidget(this.domNode.querySelector('.chinese-sentence'), chineseSentence);\r\n//         new TextAreaWidget(this.domNode.querySelector('.english-sentence'), englishSentence);\r\n//\r\n//     }\r\n// }\r\n//\r\n// class ChineseEnglishSentenceListWidget extends BaseWidget{\r\n//     constructor(parentNode, sentenceListStr){\r\n//         super(parentNode, `<div class=\"chinese-english-sentence-list-widget\">\r\n//         </div>`);\r\n//\r\n//         if(sentenceListStr){\r\n//             var sentenceListArray = sentenceListStr.split('\\n').filter(el => {return el.trim().length > 0;});\r\n//             for(var i=0;i<sentenceListArray.length;i+=2){\r\n//                 var chineseSentence = sentenceListArray[i];\r\n//                 var englishSentence = sentenceListArray[i+1];\r\n//\r\n//                 this.addOne(chineseSentence, englishSentence);\r\n//             }\r\n//         }\r\n//\r\n//         // add AddMoreWidget\r\n//         this.addMoreWidget = new AddMoreWidget(this.domNode, e => {\r\n//             this.addOne('', '');\r\n//             this.domNode.appendChild(this.addMoreWidget.domNode);\r\n//         });\r\n//\r\n//     }\r\n//\r\n//     addOne(chineseSentence, englishSentence){\r\n//         var cesw = new ChineseEnglishSentenceWidget(null, chineseSentence, englishSentence);\r\n//         new ToolBarWrapper(this.domNode, {Remove: (item)=>{\r\n//             var isRemove = window.confirm('Are you sure?');\r\n//             if(isRemove){\r\n//                 item.parentElement.removeChild(item);\r\n//             }\r\n//         }}, cesw.domNode);\r\n//     }\r\n//\r\n// }\r\n//\r\n// class TextAreaWidget extends BaseWidget{\r\n//     constructor(parentNode, contentStr = '') {\r\n//         super(parentNode, `<div class=\"TextAreaWidget\">\r\n//             <div class=\"editableNode\">\r\n//                 <textarea class=\"content\" cols=\"100\" rows=\"2\"></textarea>\r\n//             </div>\r\n//         </div>`);\r\n//         this.content = contentStr;\r\n//     }\r\n//\r\n//     get content(){\r\n//         this.contentNode.value;\r\n//     }\r\n//\r\n//     set content(c){\r\n//         this.contentNode.value = c;\r\n//     }\r\n//\r\n//     get contentNode(){\r\n//         return this.domNode.querySelector('textarea');\r\n//     }\r\n// }\r\n//\r\n//\r\n//\r\n// class AddMoreWidget extends BaseWidget{\r\n//     constructor(parentNode, callback = ()=>{alert('Default Add More Widget')}){\r\n//         super(parentNode, `<div class=\"AddMoreWidget\">\r\n//             <span>+</span>\r\n//         </div>`);\r\n//\r\n//         // add event listener\r\n//         this.domNode.addEventListener('click', callback);\r\n//     }\r\n// }\r\n//\r\n// class ToolBarWrapper extends BaseWidget{\r\n//     constructor(parentNode, buttons = {Done: ()=> {alert('Default Toolbar Item')}}, workingAreaDom){\r\n//         //  parse buttons\r\n//         var itemsHtml = '';\r\n//\r\n//         Object.keys(buttons).forEach(k => {\r\n//             var span = `<div class=\"item\">${k}</div>`;\r\n//             itemsHtml += span;\r\n//         });\r\n//\r\n//         var template = `<div class=\"toolbar-wrapper\">\r\n//             <div class=\"toolbar\">\r\n//                 ${itemsHtml}\r\n//             </div>\r\n//\r\n//             <div class=\"working-area-attach-point\"></div>\r\n//         </div>`;\r\n//\r\n//         super(parentNode, template);\r\n//\r\n//         // add workingAreaDom\r\n//         if(workingAreaDom){\r\n//             this.workingAreaDom = workingAreaDom;\r\n//             this.workingAreaAttachPoint.appendChild(workingAreaDom);\r\n//         }else{\r\n//             throw 'no workingAreaDom';\r\n//         }\r\n//\r\n//         this.buttons = buttons;\r\n//         this.setListener();\r\n//     }\r\n//\r\n//\r\n//     get workingAreaAttachPoint(){\r\n//         return this.domNode.querySelector('.working-area-attach-point');\r\n//     }\r\n//\r\n//     setListener(){\r\n//         this.domNode.addEventListener('click', e => {\r\n//             var innerText = e.target.innerText;\r\n//\r\n//             if(this.buttons[innerText]){\r\n//                 // TODO toolwrapper domNode as parameter\r\n//                 this.buttons[innerText](this.domNode);\r\n//             }\r\n//\r\n//         });\r\n//     }\r\n// }"]}